/**
 * File:    budovy_UNI.cga
 * Created: 30 Nov 2015 10:59:55 GMT
 * Author:  Pavel Tobias, CTU in Prague, Fac. of Civil Engineering, Department of Geomatics
 */
version "2014.1"

//Attributes###################################################

//General attributes

attr typ_CE = "" //spalna, nespalna, vyznamna - differentiates  the type of a building, source: SHP
attr SHAPE_Area = 0//source: SHP
const min_shape_area = 25//minimal shape area to generate two storeys

attr floor_count = case SHAPE_Area < min_shape_area : 1
                    
                    else: case typ_CE == "spalna" : (99%: 1 else: 2) //floor count depending on the type of each building
				   	      case typ_CE == "nespalna" || typ_CE == "": (70%: 1 else: 2)
			   		      case typ_CE == "vyznamna" : 3
					      else : 0



attr floor_height = (25%: 2.4 25%: 2.5 25%: 2.6 else: 2.7)  //height of floors

attr socle_height = case typ_CE == "spalna" && SHAPE_Area < min_shape_area: 0
                    else: 0.5//height of a socle
attr tile_width = 34%: 4 33%: 5 else: 6 //width of facade tiles

//Roof and roofing attributes

attr roof_type =    case typ_CE == "spalna" : "gable"
                   	case typ_CE == "nespalna" || typ_CE == "": (90%: "gable" else: "hip")
			   		case typ_CE == "vyznamna" : "hip"
					else : ""

attr angle = case typ_CE == "spalna" && SHAPE_Area < min_shape_area: 20
             else: (10%: 42 10%: 41 30%: 40 10%: 39 10%: 38 10%: 37 10%: 36 else: 35) //roof angle

attr overhangX = case typ_CE == "spalna" && SHAPE_Area < min_shape_area: 0
                 else: (34%: 0.6 33%: 0.5 else: 0.4) //for Hip roof = overhang

attr overhangY = case typ_CE == "spalna" && SHAPE_Area < min_shape_area: 0
                 else: (34%: 0.35 33%: 0.25 else: 0.15) //for Hip roof = overhang //only for Gable roofs


attr roofing =      case typ_CE == "spalna" && SHAPE_Area < min_shape_area: "wooden_shingles"
                    case typ_CE == "spalna" : (25%: "tiles_red_3" 25%: "tiles_red_4" 20%: "tiles_6" 25%: "shingles" else: "wooden_shingles") //roofing depending on the type of each building
				   	case typ_CE == "nespalna" || typ_CE == "": (16%: "tiles_red_2" 16%: "tiles_red_3" 16%: "tiles_red_4" 16%: "tiles_red_5" 12%: "tiles_6" 12%: "eternit" else: "shingles")
			   		case typ_CE == "vyznamna" : "tiles_red_2"
					else : ""

attr gable_type = case typ_CE == "spalna" : "wooden" 
				   	case typ_CE == "nespalna" || typ_CE == "": (95%: "plaster" else: "wooden")
			   		case typ_CE == "vyznamna" : "plaster"
					else : ""
          
//Facade attributes               
attr facade_type = case typ_CE == "spalna" && SHAPE_Area < min_shape_area: "shed"
                   case typ_CE == "spalna" : (90%: "plaster_wooden" else: "wooden")
                   case typ_CE == "nespalna" || typ_CE == "": (60%: "white" 10%: "yellow" 10%: "white_chambranles_red" 10%: "white_chambranles_brown" else: "white_chambranles_yellow")
			   	   case typ_CE == "vyznamna" : "white_chambranles_red"
				   else : ""

attr window_color = 50%: "red"
                    else: "white"

attr window_height = case typ_CE == "spalna" && SHAPE_Area < min_shape_area: 0
                     else: (40%: 1.5 20%: 1.4 20%: 1.1 else: 1)
attr window_width = case typ_CE == "spalna" && SHAPE_Area < min_shape_area: 0
                     else: 1

//#############################################################								
//Rules########################################################
//#############################################################	

//Footprint Rule - we have only one type of building here, i.e. non flammable

Footprint --> 
	extrude(socle_height+floor_count*floor_height)	Building
	
//splits the building geometry into its facade components
Building -->
	comp(f) {side : SideFacade | top: Roof} //

//Roofs #######################################################	
//creates the roof of large non-flamable buildings
Roof -->
    case roof_type == "gable": Roof_Gable
    case roof_type == "hip": Roof_Hip
    else: Roof_Shed


//Rules for Gable roofs----------------------------------------
Roof_Gable -->
	roofGable(angle,overhangX,overhangY) Roof_Gable_Split
	
	
//splits roofs into gables and pitches
Roof_Gable_Split -->
	comp(f) {vertical: Gable | aslant: Roofing}

//places plaster texture onto the roof gable	
Gable -->
    case gable_type == "plaster":
		Wall
	case gable_type == "wooden":
	    setupProjection(0,scope.xy, 1, 1.5)
	    texture("facades/kulna.jpg")
	    projectUV(0)
	else: NIL

//Rules for Hip roofs-------------------------------------------

Roof_Hip --> 
    roofHip(angle,overhangX) Roofing 
	
//Rules for Shed roofs-------------------------------------------

Roof_Shed --> 
    roofShed(angle) Roof_Shed_Split
    
Roof_Shed_Split -->
	comp(f) {vertical: Shed | aslant: Roofing} 

Shed -->
	Wall

//Roofing texturing---------------------------------------------
Roofing -->
	case roofing == "tiles_red_1": extrude(0.1)
	                             setupProjection(0,scope.xz, 1, 1)
	                             texture("roofs/tasky1.png")
	                             projectUV(0)
	case roofing == "tiles_red_2": extrude(0.1)
	                             setupProjection(0,scope.xz, 2, 2)
	                             texture("roofs/tasky2.jpg")
	                             projectUV(0)
	case roofing == "tiles_red_3": extrude(0.1)
	                             setupProjection(0,scope.xz, 0.8, 0.8)
	                             texture("roofs/tasky3.jpg")
	                             projectUV(0)  
	case roofing == "tiles_red_4": extrude(0.1)
	                             setupProjection(0,scope.xz, 1.5, 1.5)
	                             texture("roofs/tasky4.jpg")
	                             projectUV(0)  
	case roofing == "tiles_red_5": extrude(0.1)
	                             setupProjection(0,scope.xz, 1, 1)
	                             texture("roofs/tasky5.jpg")
	                             projectUV(0) 
    case roofing == "tiles_6": extrude(0.1)
	                             setupProjection(0,scope.xz, 2.5, 2.5)
	                             texture("roofs/tasky6.jpg")
	                             projectUV(0) 
	case roofing == "tiles_red_7": extrude(0.1)
	                             setupProjection(0,scope.xz, 1, 1)
	                             texture("roofs/tasky7.jpg")
	                             projectUV(0)                        
	                             
	case roofing == "tiles_dark": extrude(0.1)
	                              setupProjection(0,scope.xz, 2, 2)
	                              texture("roofs/tasky2_tmave.jpg")
	                              projectUV(0)
	case roofing == "metalic": extrude(0.1)
	                           setupProjection(0,scope.xz, 0.5, 1)
	                           texture("roofs/plech.jpg")
	                           projectUV(0)
	case roofing == "shingles": extrude(0.1)
	                            setupProjection(0,scope.xz, 2, 2)
	                            texture("roofs/sindel.jpg")
	                            projectUV(0)
	case roofing == "wooden_shingles": extrude(0.1)
	                            setupProjection(0,scope.xz, 2, 2)
	                            texture("roofs/sindel_dreveny.jpg")
	                            projectUV(0)
	case roofing == "eternit": extrude(0.1)
	                            setupProjection(0,scope.xz, 1.5, 1.5)
	                            texture("roofs/eternit2.jpg")
	                            projectUV(0)
	else: NIL
	
	
//Facades #######################################################	

SideFacade -->
	case facade_type == "plaster_wooden": setupProjection(0,scope.xy, scope.sx, scope.sy)
                                          split(y) {socle_height: Socle | {floor_height: Floor}*}
	                                      
    else: split(y) {socle_height: Socle | {floor_height: Floor}*}
	                                      
	
Floor --> 
    split(x) {{~tile_width: Tile}*}
	setupProjection(0,scope.xy, 1, 0.75)
	

zbytek_x = (tile_width - window_width - 0.2)/2
zbytek_y = (floor_height - window_height - 0.2)/2

Tile --> 
	split(x) 	{~zbytek_x: Wall | 
				 window_width+0.2: split(y){~zbytek_y: Wall | 
						                     window_height + 0.2 : split(x) {0.1: Chambranle |
								                                               window_width: split(y) {0.1: Chambranle | window_height: Window | 0.1: Chambranle} |
									                                        0.1: Chambranle} |  
							    
					                       ~zbytek_y: Wall} |
				 ~zbytek_x: Wall}


Wall -->
	case facade_type == "shed" :        texture("facades/kulna.jpg") 
                                        projectUV(0)
	case facade_type == "wooden" :      texture("facades/roubenka.jpg")
	                                    projectUV(0)
	case facade_type == "plaster_wooden" :      texture("facades/omitka2.tif")
	                                    projectUV(0)                             
                                       
	
	case facade_type == "white" ||  facade_type == "white_chambranles_red" || facade_type == "white_chambranles_brown" || facade_type == "white_chambranles_yellow": setupProjection(0,scope.xy, 1, 1.5)
	                                     texture("facades/omitka.jpg")
	                                     projectUV(0)
	case facade_type == "yellow" || facade_type == "yellow_chambranles_red": setupProjection(0,scope.xy, 1, 1.5)
	                                      texture("facades/omitka_zluta.jpg")
                                          projectUV(0)

	else: NIL	
	
Chambranle -->
	case facade_type == "white": setupProjection(0,scope.xy, 1, 1.5)
	                                     texture("facades/omitka.jpg")
	                                     projectUV(0)
	case facade_type == "yellow": setupProjection(0,scope.xy, 1, 1.5)
	                                    texture("facades/omitka_zluta.jpg")
	                                    projectUV(0)
	                                    
	case facade_type == "wooden" :        texture("facades/roubenka.jpg")
                                          projectUV(0) 
   
   case facade_type == "plaster_wooden" : texture("facades/omitka2.tif")
                                          projectUV(0)                                   
	                                    
                                 
	case facade_type == "white_chambranles_red": color("#FF826C") 
	
	case facade_type == "white_chambranles_brown": color("#914A33") 
	
	case facade_type == "white_chambranles_yellow": color("#FFEB99")                            
	
	case facade_type == "yellow_chambranles_red": color("#FF826C")
			   
	else: NIL	
	
Window --> 
	case window_color == "white": setupProjection(0,scope.xy, scope.sx, scope.sy)
	                              texture("windows/okno_bile.jpg")
	                              projectUV(0)
	case window_color == "red": setupProjection(0,scope.xy, scope.sx, scope.sy)
	                              texture("windows/okno_cervene.jpg")
	                              projectUV(0)
	else: NIL
	
Socle -->
	setupProjection(0,scope.xy, 1, 1.5) //we need another projection for stone socle tiles
	texture("facades/podezdivka.jpg")
	projectUV(0)	
	